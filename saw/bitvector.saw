let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

let {{
  type uint64_t_list a = ([64], [64], [a][64], [64])
  type bitvector_t nBits = ([32], uint64_t_list(nBits/^64))

  hexstring_to_bv : {a} (fin a) => [a][8] -> [a*4]
  hexstring_to_bv s = join [ drop (if (c >= 'a' /\ c <= 'f') then (c - 'a') + 10
                                    | (c >= 'A' /\ c <= 'F') then (c - 'A') + 10
                                    | (c >= '0' /\ c <= '9') then c - '0'
                                    else 0) : [4]
			   | c <- s ]
  fromList : {a, b} (fin a, fin b, a*64 >= b) => [a][64] -> [b]
  fromList List = drop (join (reverse List))
  
  toList bv = reverse(groupBy`{64} (0#bv))

  popcount : {a} (fin a) => [a] -> [32]
  popcount bs = counts!0
    where counts = [0] # [(0#[b]) + c | b <- bs | c <- counts]

}};

let bitvector_t n name = do {
  let nLength = {{ `(n /^ 64) : [64] }};

  nLength_max <- crucible_fresh_var (str_concat name ".nLength_max") (llvm_int 64);
  crucible_precond {{ nLength_max >= nLength }};

  (List, pList) <- ptr_to_fresh (str_concat name ".bits->pList") (llvm_array (eval_int {{ `(n /^ 64) : [32] }}) (llvm_int 64));

  let nBits = {{ `n : [32] }};

  pbv <- crucible_alloc (llvm_struct "struct.bitvector_t");

  crucible_points_to pbv (crucible_struct [crucible_term nBits,
    crucible_struct [
      crucible_term nLength,
      crucible_term nLength_max,
      pList]]);

  return(pbv, nBits, nLength, nLength_max, List, pList);
};

let bitvector_t' n name pbv = do {
  let nLength = {{ `(n /^ 64) : [64] }};

  nLength_max <- crucible_fresh_var (str_concat name ".nLength_max") (llvm_int 64);
  crucible_postcond {{ nLength_max >= nLength }};

  (List, pList) <- ptr_to_fresh (str_concat name ".bits->pList") (llvm_array (eval_int {{ `(n /^ 64) : [32] }}) (llvm_int 64));

  let nBits = {{ `n : [32] }};

  crucible_points_to pbv (crucible_struct [crucible_term nBits,
    crucible_struct [
      crucible_term nLength,
      crucible_term nLength_max,
      pList]]);

  return(nBits, nLength, nLength_max, List, pList);
};

let bitvector_t_zeroize_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";

  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ List' == (zero : [n /^ 64][64]) }};
};

let bitvector_t_alloc_spec (n : Int) = do {
  crucible_execute_func [crucible_term {{ `n : [32] }}];

  pbv <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;
  
  crucible_postcond {{ List' == (zero : [n /^ 64][64]) }};

  crucible_return pbv;
};

let bitvector_t_cleanHighBits_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";

  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ (fromList List : [n]) == fromList List' }};
};

let bitvector_t_fromHexString_spec (n : Int) = do {
  string <- crucible_fresh_var "string" (llvm_array n (llvm_int 8));
  pstring <- alloc_init (llvm_array (eval_int {{ `n + 1 : [32] }}) (llvm_int 8)) (crucible_term {{ string # [0] }});

  crucible_precond {{ [ (c >= 'a' /\ c <= 'f') \/
                        (c >= 'A' /\ c <= 'F') \/
			(c >= '0' /\ c <= '9')
		      | c <- string ] == ~zero }};

  crucible_execute_func [pstring];

  pbv <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' (eval_int {{ `(n*4) : [32] }}) "bv" pbv;
  
  crucible_postcond {{ hexstring_to_bv (take `{n} string) == fromList List' }};

  crucible_return pbv;
};

let bitvector_t_copyUpdate_spec (n : Int) = do {
  (pdst, d_nBits, d_nLength, d_nLength_max, d_List, d_pList) <- bitvector_t n "dst";
  (psrc, s_nBits, s_nLength, s_nLength_max, s_List, s_pList) <- bitvector_t n "src";
  crucible_execute_func [pdst, psrc];

  (d_nBits', d_nLength', d_nLength_max', d_List', d_pList') <- bitvector_t' n "dst'" pdst;

  (s_nBits', s_nLength', s_nLength_max', s_List', s_pList') <- bitvector_t' n "src'" psrc;

  crucible_postcond {{ s_List == s_List' }};

  crucible_postcond {{ s_List == d_List' }};
};

let bitvector_t_copy_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";

  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;
  crucible_postcond {{ List == List' }};

  pret <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (r_nBits, r_nLength, r_nLength_max, r_List, r_pList) <- bitvector_t' n "ret" pret;
  crucible_return pret;
  crucible_postcond {{ r_List == List }};
};

let bitvector_t_widenUpdate_spec (n : Int) (nBitsToAdd : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";

  crucible_execute_func [pbv, crucible_term {{ `nBitsToAdd : [32] }}];

  let n' = eval_int {{ `(n + nBitsToAdd) : [32] }};

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n' "bv'" pbv;

  crucible_postcond {{ (0 # (fromList`{b=n} List)) == (fromList`{b=n'} List') }};
};

let bitvector_t_concat_spec (nx : Int) (ny : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t nx "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t ny "y";
  crucible_execute_func [px, py];

  let n' = eval_int {{ `(nx + ny) : [32] }};

  pbv <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n' "bv'" pbv;
  crucible_return pbv;

  crucible_postcond
    {{ (fromList`{b=nx} x_List) # (fromList`{b=ny} y_List) == (fromList`{b=n'} List') }};
};

let bitvector_t_negateUpdate_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ (fromList`{b=n} List) == ~(fromList`{b=n} List') }};
};

let bitvector_t_negate_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv];

  pbv' <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv';
  crucible_return pbv';

  crucible_postcond {{ (fromList`{b=n} List) == ~(fromList`{b=n} List') }};
};

let bitvector_t_dropUpdate_spec (n : Int) (nBitsToDrop : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv, crucible_term {{ `nBitsToDrop : [32] }}];

  let n' = eval_int {{ `(n - nBitsToDrop) : [32] }};

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n' "bv'" pbv;

  crucible_postcond {{ drop`{nBitsToDrop} (fromList`{b=n} List) == (fromList`{b=n'} List') }};
};

let bitvector_t_drop_spec (n : Int) (nBitsToDrop : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv, crucible_term {{ `nBitsToDrop : [32] }}];

  let n' = eval_int {{ `(n - nBitsToDrop) : [32] }};

  pbv' <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n' "bv'" pbv';

crucible_postcond {{ drop`{nBitsToDrop} (fromList`{b=n} List) == (fromList`{b=n'} List') }};

  crucible_return pbv';
};

let bitvector_t_getBit_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  index <- crucible_fresh_var "index" (llvm_int 32);
  crucible_precond {{ index < `n }};

  crucible_execute_func [pbv, crucible_term {{ index }}];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_return (crucible_term {{ 0#[(fromList`{b=n} List)!index] : [8] }});
};

let bitvector_t_setBit_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  index <- crucible_fresh_var "index" (llvm_int 32);
  crucible_precond {{ index < `n }};

  value <- crucible_fresh_var "value" (llvm_int 8);

  crucible_execute_func [pbv, crucible_term {{ index }}, crucible_term {{ value }}];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

//  crucible_postcond
//    {{ (fromList`{b=n} List') == (updateEnd (fromList`{b=n} List) (index : [32]) (value!=0)) }};
  crucible_postcond {{ (fromList`{b=n} List')!index == (value!=0) }}; //Bit is set
  crucible_postcond {{ (fromList`{b=n} List') && ~(1<<index) ==       //Nothing else changed
                       (fromList`{b=n} List ) && ~(1<<index) }};
};

let bitvector_t_popcount_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ fromList`{b=n} List == fromList`{b=n} List' }};

  crucible_return (crucible_term {{ (popcount (fromList`{b=n} List)) : [32] }});
};

let bitvector_t_sliceUpdate_spec (n : Int) (start : Int) (length : Int) = do {
  (pslice, s_nBits, s_nLength, s_nLength_max, s_List, s_pList) <- bitvector_t length "slice";
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pslice, pbv, crucible_term {{ `start : [32] }}, crucible_term {{ `length : [32] }}];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ List == List' }};

  (s_nBits', s_nLength', s_nLength_max', s_List', s_pList') <- bitvector_t' length "slice'" pslice;

  crucible_postcond {{ fromList s_List' == (fromList`{b=n} List)!!([start+length, start+length-1 .. start]:[_][32]) }};
};

let bitvector_t_slice_spec (n : Int) (start : Int) (length : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList) <- bitvector_t n "bv";
  crucible_execute_func [pbv, crucible_term {{ `start : [32] }}, crucible_term {{ `length : [32] }}];

  (nBits', nLength', nLength_max', List', pList') <- bitvector_t' n "bv'" pbv;

  crucible_postcond {{ List == List' }};

  pslice <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (s_nBits, s_nLength, s_nLength_max, s_List, s_pList) <- bitvector_t' length "slice'" pslice;

  crucible_postcond {{ fromList s_List == (fromList`{b=n} List)!!([start+length, start+length-1 .. start]:[_][32]) }};

  crucible_return pslice;
};

let bitvector_t_xorUpdate_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};
  crucible_postcond {{ x_List' == x_List ^ y_List }};
};

let bitvector_t_xor_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  crucible_postcond {{ x_List' == x_List }};
  
  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};

  presult <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (r_nBits, r_nLength, r_nLength_max, r_List, r_pList) <- bitvector_t' n "r" presult;

  crucible_return presult;

  crucible_postcond {{ r_List == x_List ^ y_List }};
};

let bitvector_t_orUpdate_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};
  crucible_postcond {{ x_List' == x_List || y_List }};
};

let bitvector_t_or_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  crucible_postcond {{ x_List' == x_List }};
  
  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};

  presult <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (r_nBits, r_nLength, r_nLength_max, r_List, r_pList) <- bitvector_t' n "r" presult;

  crucible_return presult;

  crucible_postcond {{ r_List == x_List || y_List }};
};

let bitvector_t_andUpdate_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};
  crucible_postcond {{ x_List' == x_List && y_List }};
};

let bitvector_t_and_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  crucible_postcond {{ x_List' == x_List }};
  
  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ y_List' == y_List }};

  presult <- crucible_alloc (llvm_struct "struct.bitvector_t");
  (r_nBits, r_nLength, r_nLength_max, r_List, r_pList) <- bitvector_t' n "r" presult;

  crucible_return presult;

  crucible_postcond {{ r_List == x_List && y_List }};
};

let bitvector_t_equal_spec (n : Int) = do {
  (px, x_nBits, x_nLength, x_nLength_max, x_List, x_pList) <- bitvector_t n "x";
  (py, y_nBits, y_nLength, y_nLength_max, y_List, y_pList) <- bitvector_t n "y";
  crucible_execute_func [px, py];

  (x_nBits', x_nLength', x_nLength_max', x_List', x_pList') <- bitvector_t' n "x'" px;

  crucible_postcond {{ (fromList`{b=n} x_List) == (fromList`{b=n} x_List') }};
  
  (y_nBits', y_nLength', y_nLength_max', y_List', y_pList') <- bitvector_t' n "y'" py;

  crucible_postcond {{ (fromList`{b=n} y_List) == (fromList`{b=n} y_List') }};

  crucible_return (crucible_term {{ 0 # [(fromList`{b=n} x_List) == (fromList`{b=n} y_List)] : [8] }});
};


bitvector_bc <- llvm_load_module "../obj/bitvector.bc";

let nBits = 200;
let nBits2 = 10;
let nBitsToAdd = 10;
let nBitsToDrop = 10;
let nHexChars = 17;
let slicestart = 54;
let slicelength = 113;

bitvector_t_zeroize_result <- crucible_llvm_verify bitvector_bc "bitvector_t_zeroize" [] false (bitvector_t_zeroize_spec nBits) z3;

bitvector_t_alloc_result <- crucible_llvm_verify bitvector_bc "bitvector_t_alloc" [bitvector_t_zeroize_result] false (bitvector_t_alloc_spec nBits) z3;

bitvector_t_cleanHighBits_result <- crucible_llvm_verify bitvector_bc "bitvector_t_cleanHighBits" [] false (bitvector_t_cleanHighBits_spec nBits) z3;

bitvector_t_fromHexString_result <- crucible_llvm_verify bitvector_bc "bitvector_t_fromHexString" [] true (bitvector_t_fromHexString_spec nHexChars) z3;

bitvector_t_copyUpdate_result <- crucible_llvm_verify bitvector_bc "bitvector_t_copyUpdate" [] true (bitvector_t_copyUpdate_spec nBits) z3;

bitvector_t_copy_result <- crucible_llvm_verify bitvector_bc "bitvector_t_copy" [bitvector_t_copyUpdate_result] true (bitvector_t_copy_spec nBits) z3;

bitvector_t_widenUpdate_result <- crucible_llvm_verify bitvector_bc "bitvector_t_widenUpdate" [] true (bitvector_t_widenUpdate_spec nBits nBitsToAdd) z3;

bitvector_t_concat_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_concat" [bitvector_t_widenUpdate_result] true (bitvector_t_concat_spec nBits2 nBits) z3);

bitvector_t_negateUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_negateUpdate" [] true (bitvector_t_negateUpdate_spec nBits) z3);

bitvector_t_negate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_negate" [bitvector_t_negateUpdate_result] true (bitvector_t_negate_spec nBits) z3);

bitvector_t_dropUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_dropUpdate" [] true (bitvector_t_dropUpdate_spec nBits nBitsToDrop) z3);

bitvector_t_drop_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_drop" [] true (bitvector_t_drop_spec nBits nBitsToDrop) z3);

bitvector_t_getBit_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_getBit" [] true (bitvector_t_getBit_spec nBits) z3);

bitvector_t_setBit_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_setBit" [] true (bitvector_t_setBit_spec nBits) z3);

bitvector_t_popcount_result <- fails (crucible_llvm_verify bitvector_bc "bitvector_t_popcount" [] true (bitvector_t_popcount_spec nBits) z3);

bitvector_t_sliceUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_sliceUpdate" [] true (bitvector_t_sliceUpdate_spec nBits slicestart slicelength) z3);

bitvector_t_slice_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_slice" [bitvector_t_sliceUpdate_result] true (bitvector_t_slice_spec nBits slicestart slicelength) z3);

bitvector_t_xorUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_xorUpdate" [] true (bitvector_t_xorUpdate_spec nBits) z3);

bitvector_t_xor_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_xor" [bitvector_t_xorUpdate_result] true (bitvector_t_xor_spec nBits) z3);

bitvector_t_orUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_orUpdate" [] true (bitvector_t_orUpdate_spec nBits) z3);

bitvector_t_or_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_or" [bitvector_t_orUpdate_result] true (bitvector_t_or_spec nBits) z3);

bitvector_t_andUpdate_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_andUpdate" [] true (bitvector_t_andUpdate_spec nBits) z3);

bitvector_t_and_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_and" [bitvector_t_andUpdate_result] true (bitvector_t_and_spec nBits) z3);

bitvector_t_equal_result <- (crucible_llvm_verify bitvector_bc "bitvector_t_equal" [] true (bitvector_t_equal_spec nBits) z3);




