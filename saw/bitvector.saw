let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

let {{
  type uint64_t_list a = ([64], [64], [a][64], [64])
  type bitvector_t nBits = ([32], uint64_t_list(nBits/^64))
}};

let bitvector_t n name = do {
  nLength <- crucible_fresh_var (str_concat name ".bits->nLength") (llvm_int 64);
  nLength_max <- crucible_fresh_var (str_concat name ".bits->nLength_max") (llvm_int 64);
  (List, pList) <- ptr_to_fresh (str_concat name ".bits->pList") (llvm_array (eval_int {{ `(n /^ 64) : [32] }}) (llvm_int 64));
  nResizeAmt <- crucible_fresh_var (str_concat name ".bits->nResizeAmt") (llvm_int 64);

  nBits <- crucible_fresh_var (str_concat name ".nBits") (llvm_int 32);

  pbv <- crucible_alloc (llvm_struct "struct.bitvector_t");  
  crucible_points_to pbv (crucible_struct [crucible_term nBits,
    crucible_struct [
      crucible_term nLength,
      crucible_term nLength_max,
      pList,
      crucible_term nResizeAmt]]);

  return(pbv, nBits, nLength, nLength_max, List, pList, nResizeAmt);
};

let bitvector_t' n name pbv = do {
  nLength <- crucible_fresh_var (str_concat name ".bits->nLength") (llvm_int 64);
  nLength_max <- crucible_fresh_var (str_concat name ".bits->nLength_max") (llvm_int 64);
  (List, pList) <- ptr_to_fresh (str_concat name ".bits->pList") (llvm_array (eval_int {{ `(n /^ 64) : [32] }}) (llvm_int 64));
  nResizeAmt <- crucible_fresh_var (str_concat name ".bits->nResizeAmt") (llvm_int 64);

  nBits <- crucible_fresh_var (str_concat name ".nBits") (llvm_int 32);

  crucible_points_to pbv (crucible_struct [crucible_term nBits,
    crucible_struct [
      crucible_term nLength,
      crucible_term nLength_max,
      pList,
      crucible_term nResizeAmt]]);

  return(nBits, nLength, nLength_max, List, pList, nResizeAmt);
};

let bitvector_t_alloc_spec (n : Int) = do {
  crucible_execute_func [crucible_term {{ `n : [32] }}];

  (pbv, nBits, nLength, nLength_max, List, pList, nResizeAmt) <- bitvector_t n "bv_alloc";
  
  crucible_return pbv;

  crucible_postcond {{ nBits == `n }};
  crucible_postcond {{ nLength == `(n /^ 64) }};
  crucible_postcond {{ nLength_max == `(n /^ 64) }};
  crucible_postcond {{ List == (zero : [n /^ 64][64]) }};
  crucible_postcond {{ nResizeAmt == 1 }};
};

let bitvector_t_zeroize_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList, nResizeAmt) <- bitvector_t n "bv_zeroize";

  crucible_precond {{ nBits == `n }};
  crucible_precond {{ nLength == `(n /^ 64) }};
  crucible_precond {{ nLength_max == `(n /^ 64) }};
  crucible_precond {{ nResizeAmt == 1 }};

  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList', nResizeAmt') <- bitvector_t' n "bv_zeroize'" pbv;

  crucible_postcond {{ nBits' == `n }};
  crucible_postcond {{ nLength' == `(n /^ 64) }};
  crucible_postcond {{ nLength_max' == `(n /^ 64) }};
  crucible_postcond {{ List' == (zero : [n /^ 64][64]) }};
  crucible_postcond {{ nResizeAmt' == 1 }};
};

let bitvector_t_cleanHighBits_spec (n : Int) = do {
  (pbv, nBits, nLength, nLength_max, List, pList, nResizeAmt) <- bitvector_t n "bv_zeroize";

  crucible_precond {{ nBits == `n }};
  crucible_precond {{ nLength == `(n /^ 64) }};
  crucible_precond {{ nLength_max == `(n /^ 64) }};
  crucible_precond {{ nResizeAmt == 1 }};

  crucible_execute_func [pbv];

  (nBits', nLength', nLength_max', List', pList', nResizeAmt') <- bitvector_t' n "bv_zeroize'" pbv;

  crucible_postcond {{ nBits' == `n }};
  crucible_postcond {{ nLength' == `(n /^ 64) }};
  crucible_postcond {{ nLength_max' == `(n /^ 64) }};
  crucible_postcond {{ (take `{back=n} (join List)) == (take `{back=n} (join List')) }};
  crucible_postcond {{ nResizeAmt' == 1 }};
};



bitvector_bc <- llvm_load_module "../obj/bitvector.bc";

let nBits = 1000;

bitvector_t_alloc_result <- crucible_llvm_verify bitvector_bc "bitvector_t_alloc" [] false (bitvector_t_alloc_spec nBits) z3;

bitvector_t_zeroize_result <- crucible_llvm_verify bitvector_bc "bitvector_t_zeroize" [] false (bitvector_t_zeroize_spec nBits) z3;

bitvector_t_cleanHighBits_result <- crucible_llvm_verify bitvector_bc "bitvector_t_cleanHighBits" [] false (bitvector_t_cleanHighBits_spec nBits) z3;
